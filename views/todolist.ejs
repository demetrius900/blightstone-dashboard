<%- contentFor('html_attribute') %>

<%- contentFor('extra_css') %>

<%- contentFor('body_attribute') %>

<%- contentFor('content') %>

<!-- Start Content-->
<div class="container-fluid">

    <div class="py-3 d-flex align-items-sm-center flex-sm-row flex-column">
        <div class="flex-grow-1">
            <div class="d-flex align-items-center">
                <div id="back-button-container" style="display: none;">
                    <a href="javascript:history.back()" class="btn btn-outline-secondary me-3">
                        <i class="mdi mdi-arrow-left"></i> Back
                    </a>
                </div>
                <div>
                    <h4 class="fs-18 fw-semibold m-0">Task Management</h4>
                    <p class="text-muted mb-0" id="task-context"></p>
                </div>
            </div>
        </div>

        <div class="text-end">
            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTaskModal">
                <i class="mdi mdi-plus me-2"></i>Add New Task
            </button>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card">

                <div class="card-body">
                    <!-- Task Filters -->
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <select class="form-select" id="statusFilter">
                                <option value="">All Status</option>
                                <option value="Pending">Pending</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Completed">Completed</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="priorityFilter">
                                <option value="">All Priority</option>
                                <option value="High">High</option>
                                <option value="Medium">Medium</option>
                                <option value="Low">Low</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <select class="form-select" id="projectFilter">
                                <option value="">All Projects</option>
                                <!-- Will be populated dynamically -->
                            </select>
                        </div>
                        <div class="col-md-3">
                            <input type="text" class="form-control" id="searchTasks" placeholder="Search tasks...">
                        </div>
                    </div>

                    <div class="table-responsive">
                        <table class="table table-hover" id="tasksTable">
                            <thead class="table-light">
                              <tr>
                                <th width="5%">
                                    <input type="checkbox" id="selectAll" class="form-check-input">
                                </th>
                                <th width="35%">Task</th>
                                <th width="15%">Project</th>
                                <th width="15%">Assigned To</th>
                                <th width="10%">Status</th>
                                <th width="10%">Priority</th>
                                <th width="10%">Actions</th>
                              </tr>
                            </thead>
                            <tbody id="tasksTableBody">
                                <tr>
                                    <td colspan="7" class="text-center py-4">
                                        <div class="spinner-border text-primary" role="status">
                                            <span class="visually-hidden">Loading...</span>
                                        </div>
                                        <p class="mt-2">Loading tasks...</p>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>

                    <!-- Bulk Actions -->
                    <div class="d-none" id="bulkActions">
                        <div class="bg-light p-3 rounded mb-3">
                            <div class="d-flex gap-2">
                                <button class="btn btn-sm btn-success" onclick="bulkUpdateStatus('Completed')">
                                    <i class="mdi mdi-check"></i> Mark Completed
                                </button>
                                <button class="btn btn-sm btn-warning" onclick="bulkUpdateStatus('In Progress')">
                                    <i class="mdi mdi-clock"></i> Mark In Progress
                                </button>
                                <button class="btn btn-sm btn-danger" onclick="bulkDelete()">
                                    <i class="mdi mdi-delete"></i> Delete Selected
                                </button>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>

</div>
<!-- container-fluid -->

<!-- Add Task Modal -->
<div class="modal fade" id="addTaskModal" tabindex="-1" aria-labelledby="addTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addTaskModalLabel">Add New Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="addTaskForm">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="taskTitle" class="form-label">Task Title *</label>
                            <input type="text" class="form-control" id="taskTitle" name="title" required>
                        </div>
                        <div class="col-md-12 mb-3">
                            <label for="taskDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="taskDescription" name="description" rows="3"></textarea>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="taskProject" class="form-label">Project</label>
                            <select class="form-select" id="taskProject" name="project_id">
                                <option value="">Select Project</option>
                                <!-- Will be populated dynamically -->
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="taskAssignee" class="form-label">Assign To</label>
                            <select class="form-select" id="taskAssignee" name="assigned_to">
                                <option value="">Select Team Member</option>
                                <!-- Will be populated dynamically -->
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="taskPriority" class="form-label">Priority</label>
                            <select class="form-select" id="taskPriority" name="priority" required>
                                <option value="Low">Low</option>
                                <option value="Medium" selected>Medium</option>
                                <option value="High">High</option>
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="taskDueDate" class="form-label">Due Date</label>
                            <input type="date" class="form-control" id="taskDueDate" name="due_date">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <span id="addTaskBtnText">Create Task</span>
                        <span id="addTaskSpinner" class="spinner-border spinner-border-sm d-none ms-2" role="status"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Edit Task Modal -->
<div class="modal fade" id="editTaskModal" tabindex="-1" aria-labelledby="editTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="editTaskForm">
                <input type="hidden" id="editTaskId" name="id">
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12 mb-3">
                            <label for="editTaskTitle" class="form-label">Task Title *</label>
                            <input type="text" class="form-control" id="editTaskTitle" name="title" required>
                        </div>
                        <div class="col-md-12 mb-3">
                            <label for="editTaskDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editTaskDescription" name="description" rows="3"></textarea>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="editTaskProject" class="form-label">Project</label>
                            <select class="form-select" id="editTaskProject" name="project_id">
                                <option value="">Select Project</option>
                                <!-- Will be populated dynamically -->
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="editTaskAssignee" class="form-label">Assign To</label>
                            <select class="form-select" id="editTaskAssignee" name="assigned_to">
                                <option value="">Select Team Member</option>
                                <!-- Will be populated dynamically -->
                            </select>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="editTaskStatus" class="form-label">Status</label>
                            <select class="form-select" id="editTaskStatus" name="status" required>
                                <option value="Pending">Pending</option>
                                <option value="In Progress">In Progress</option>
                                <option value="Completed">Completed</option>
                            </select>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="editTaskPriority" class="form-label">Priority</label>
                            <select class="form-select" id="editTaskPriority" name="priority" required>
                                <option value="Low">Low</option>
                                <option value="Medium">Medium</option>
                                <option value="High">High</option>
                            </select>
                        </div>
                        <div class="col-md-4 mb-3">
                            <label for="editTaskDueDate" class="form-label">Due Date</label>
                            <input type="date" class="form-control" id="editTaskDueDate" name="due_date">
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <span id="editTaskBtnText">Update Task</span>
                        <span id="editTaskSpinner" class="spinner-border spinner-border-sm d-none ms-2" role="status"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteTaskModal" tabindex="-1" aria-labelledby="deleteTaskModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteTaskModalLabel">Delete Task</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="text-center mb-3">
                    <i class="mdi mdi-alert-circle-outline text-danger" style="font-size: 48px;"></i>
                </div>
                <p class="text-center">Are you sure you want to delete this task? This action cannot be undone.</p>
                <div class="alert alert-danger">
                    <strong>Task:</strong> <span id="deleteTaskName"></span>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteTask">
                    <span id="deleteTaskBtnText">Delete Task</span>
                    <span id="deleteTaskSpinner" class="spinner-border spinner-border-sm d-none ms-2" role="status"></span>
                </button>
            </div>
        </div>
    </div>
</div>

<%- contentFor('extra_javascript') %>

<script>
// Task management - data loaded from API
let tasks = [];
let projects = [];
// Data will be loaded from API

let users = [];
// Users will be loaded from API

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    console.log('📋 Task Management loaded');
    loadTasks();
    loadProjects();
    loadUsers();
    setupEventListeners();
    setupProjectContext();
});

// Load tasks from API
async function loadTasks() {
    try {
        console.log('🔄 Loading tasks from API...');
        const response = await fetch('/api/tasks');
        console.log('📡 API Response status:', response.status);
        
        if (response.ok) {
            const tasksData = await response.json();
            console.log('📋 Tasks data received:', tasksData);
            tasks = tasksData;
            renderTasks();
            console.log('✅ Tasks loaded:', tasks.length);
        } else {
            console.error('❌ Failed to load tasks, status:', response.status);
            const errorText = await response.text();
            console.error('❌ Error response:', errorText);
            showError('Failed to load tasks');
        }
    } catch (error) {
        console.error('❌ Error loading tasks:', error);
        showError('Failed to load tasks');
    }
}

// Render tasks in table
function renderTasks(tasksToRender = tasks) {
    const tbody = document.getElementById('tasksTableBody');
    
    if (tasksToRender.length === 0) {
        tbody.innerHTML = `
            <tr>
                <td colspan="7" class="text-center py-4">
                    <i class="mdi mdi-clipboard-text-outline fs-24 text-muted"></i>
                    <p class="mt-2 text-muted">No tasks found</p>
                </td>
            </tr>
        `;
        return;
    }
    
    tbody.innerHTML = tasksToRender.map(task => {
        const project = projects.find(p => p.id === task.project_id);
        const user = users.find(u => u.id === task.assigned_to);
        
        return `
            <tr>
                <td>
                    <input type="checkbox" class="form-check-input task-checkbox" value="${task.id}">
                </td>
                <td>
                    <div class="d-flex align-items-center">
                        <div>
                            <h6 class="mb-1">${task.title}</h6>
                            ${task.description ? `<p class="text-muted mb-0 small">${task.description}</p>` : ''}
                        </div>
                    </div>
                </td>
                <td>
                    <span class="badge bg-primary-subtle text-primary">
                        ${project?.name || 'No Project'}
                    </span>
                </td>
                <td>
                    ${user?.name || 'Unassigned'}
                </td>
                <td>
                    <span class="badge ${getStatusBadgeClass(task.status)}">
                        ${task.status}
                    </span>
                </td>
                <td>
                    <span class="badge ${getPriorityBadgeClass(task.priority)}">
                        ${task.priority}
                    </span>
                </td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="editTask('${task.id}')" title="Edit">
                            <i class="mdi mdi-pencil-outline"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-success" onclick="toggleTaskStatus('${task.id}')" title="Toggle Status">
                            <i class="mdi mdi-check"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deleteTask('${task.id}')" title="Delete">
                            <i class="mdi mdi-delete-outline"></i>
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }).join('');
}

// Get status badge class
function getStatusBadgeClass(status) {
    switch(status) {
        case 'Completed': return 'bg-success-subtle text-success';
        case 'In Progress': return 'bg-warning-subtle text-warning';
        case 'Pending': return 'bg-secondary-subtle text-secondary';
        default: return 'bg-light-subtle text-dark';
    }
}

// Get priority badge class
function getPriorityBadgeClass(priority) {
    switch(priority) {
        case 'High': return 'bg-danger-subtle text-danger';
        case 'Medium': return 'bg-warning-subtle text-warning';
        case 'Low': return 'bg-success-subtle text-success';
        default: return 'bg-light-subtle text-dark';
    }
}

// Load projects from API
async function loadProjects() {
    try {
        const response = await fetch('/api/projects');
        if (response.ok) {
            projects = await response.json();
            populateDropdowns();
        } else {
            console.error('Failed to load projects');
        }
    } catch (error) {
        console.error('Error loading projects:', error);
    }
}

// Load users from API
async function loadUsers() {
    try {
        const response = await fetch('/api/users');
        if (response.ok) {
            users = await response.json();
            populateDropdowns();
        } else {
            console.error('Failed to load users');
        }
    } catch (error) {
        console.error('Error loading users:', error);
    }
}

// Setup project context (for back button, etc.)
function setupProjectContext() {
    const urlParams = new URLSearchParams(window.location.search);
    const projectId = urlParams.get('id');
    
    if (projectId) {
        // Show back button and set project context
        document.getElementById('back-button-container').style.display = 'block';
        document.getElementById('task-context').textContent = 'Project Tasks';
        
        // Filter tasks by project
        if (tasks.length > 0) {
            const projectTasks = tasks.filter(task => task.project_id === projectId);
            renderTasks(projectTasks);
        }
    }
}

// Populate dropdowns
function populateDropdowns() {
    // Project dropdowns
    const projectSelects = ['#taskProject', '#editTaskProject', '#projectFilter'];
    projectSelects.forEach(selector => {
        const select = document.querySelector(selector);
        if (select) {
            const options = projects.map(p => `<option value="${p.id}">${p.name}</option>`).join('');
            if (selector === '#projectFilter') {
                select.innerHTML = '<option value="">All Projects</option>' + options;
            } else {
                select.innerHTML = '<option value="">Select Project</option>' + options;
            }
        }
    });
    
    // User dropdowns
    const userSelects = ['#taskAssignee', '#editTaskAssignee'];
    userSelects.forEach(selector => {
        const select = document.querySelector(selector);
        if (select) {
            const options = users.map(u => `<option value="${u.id}">${u.name}</option>`).join('');
            select.innerHTML = '<option value="">Select Team Member</option>' + options;
        }
    });
}

// Setup event listeners
function setupEventListeners() {
    // Add task form
    document.getElementById('addTaskForm').addEventListener('submit', handleAddTask);
    
    // Edit task form
    document.getElementById('editTaskForm').addEventListener('submit', handleEditTask);
    
    // Delete confirmation
    document.getElementById('confirmDeleteTask').addEventListener('click', handleDeleteTask);
    
    // Filters
    document.getElementById('statusFilter').addEventListener('change', applyFilters);
    document.getElementById('priorityFilter').addEventListener('change', applyFilters);
    document.getElementById('projectFilter').addEventListener('change', applyFilters);
    document.getElementById('searchTasks').addEventListener('input', applyFilters);
    
    // Select all checkbox
    document.getElementById('selectAll').addEventListener('change', handleSelectAll);
}

// Handle add task
async function handleAddTask(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const taskData = Object.fromEntries(formData.entries());
    
    try {
        // Create task via API
        const response = await fetch('/api/tasks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(taskData)
        });

        if (!response.ok) {
            throw new Error('Failed to create task');
        }

        // Reload tasks from API
        await loadTasks();
        
        // Close modal and reset form
        bootstrap.Modal.getInstance(document.getElementById('addTaskModal')).hide();
        e.target.reset();
        
        showSuccess('Task created successfully!');
    } catch (error) {
        console.error('Error creating task:', error);
        showError('Failed to create task');
    }
}

// Toggle task status
function toggleTaskStatus(taskId) {
    const task = tasks.find(t => t.id === taskId);
    if (!task) return;
    
    task.status = task.status === 'Completed' ? 'Pending' : 'Completed';
    renderTasks();
    showSuccess(`Task marked as ${task.status.toLowerCase()}!`);
}

// Handle edit task
function handleEditTask(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const taskData = Object.fromEntries(formData.entries());
    const taskId = taskData.id;
    
    // Find and update task
    const taskIndex = tasks.findIndex(t => t.id === taskId);
    if (taskIndex !== -1) {
        tasks[taskIndex] = { ...tasks[taskIndex], ...taskData };
        renderTasks();
        
        // Close modal
        bootstrap.Modal.getInstance(document.getElementById('editTaskModal')).hide();
        
        showSuccess('Task updated successfully!');
    }
}

// Handle delete task
function handleDeleteTask() {
    const modal = document.getElementById('deleteTaskModal');
    const taskId = modal.dataset.taskId;
    if (!taskId) return;
    
    if (taskId === 'bulk') {
        // Handle bulk delete
        const bulkIds = modal.dataset.bulkIds.split(',');
        tasks = tasks.filter(task => !bulkIds.includes(task.id));
        updateBulkActions();
        showSuccess(`${bulkIds.length} tasks deleted successfully!`);
    } else {
        // Handle single delete
        tasks = tasks.filter(t => t.id !== taskId);
        showSuccess('Task deleted successfully!');
    }
    
    renderTasks();
    
    // Close modal
    bootstrap.Modal.getInstance(modal).hide();
    
    // Clear data attributes
    delete modal.dataset.taskId;
    delete modal.dataset.bulkIds;
}

// Edit task - show modal
function editTask(taskId) {
    const task = tasks.find(t => t.id === taskId);
    if (!task) return;
    
    // Populate edit form
    document.getElementById('editTaskId').value = task.id;
    document.getElementById('editTaskTitle').value = task.title;
    document.getElementById('editTaskDescription').value = task.description || '';
    document.getElementById('editTaskProject').value = task.project_id || '';
    document.getElementById('editTaskAssignee').value = task.assigned_to || '';
    document.getElementById('editTaskStatus').value = task.status;
    document.getElementById('editTaskPriority').value = task.priority;
    document.getElementById('editTaskDueDate').value = task.due_date || '';
    
    // Show modal
    new bootstrap.Modal(document.getElementById('editTaskModal')).show();
}

// Delete task - show modal
function deleteTask(taskId) {
    const task = tasks.find(t => t.id === taskId);
    if (!task) return;
    
    // Set task details in modal
    document.getElementById('deleteTaskName').textContent = task.title;
    document.getElementById('deleteTaskModal').dataset.taskId = taskId;
    
    // Show modal
    new bootstrap.Modal(document.getElementById('deleteTaskModal')).show();
}

// Apply filters
function applyFilters() {
    const statusFilter = document.getElementById('statusFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;
    const projectFilter = document.getElementById('projectFilter').value;
    const searchFilter = document.getElementById('searchTasks').value.toLowerCase();
    
    let filteredTasks = tasks.filter(task => {
        const matchesStatus = !statusFilter || task.status === statusFilter;
        const matchesPriority = !priorityFilter || task.priority === priorityFilter;
        const matchesProject = !projectFilter || task.project_id === projectFilter;
        const matchesSearch = !searchFilter || 
            task.title.toLowerCase().includes(searchFilter) ||
            (task.description && task.description.toLowerCase().includes(searchFilter));
        
        return matchesStatus && matchesPriority && matchesProject && matchesSearch;
    });
    
    renderTasks(filteredTasks);
}

// Handle select all
function handleSelectAll(e) {
    const checkboxes = document.querySelectorAll('.task-checkbox');
    checkboxes.forEach(checkbox => {
        checkbox.checked = e.target.checked;
    });
    updateBulkActions();
}

// Update bulk actions visibility
function updateBulkActions() {
    const checkedBoxes = document.querySelectorAll('.task-checkbox:checked');
    const bulkActions = document.getElementById('bulkActions');
    
    if (checkedBoxes.length > 0) {
        bulkActions.classList.remove('d-none');
    } else {
        bulkActions.classList.add('d-none');
    }
}

// Bulk update status
function bulkUpdateStatus(status) {
    const checkedBoxes = document.querySelectorAll('.task-checkbox:checked');
    const taskIds = Array.from(checkedBoxes).map(cb => cb.value);
    
    if (taskIds.length === 0) return;
    
    tasks.forEach(task => {
        if (taskIds.includes(task.id)) {
            task.status = status;
        }
    });
    
    renderTasks();
    updateBulkActions();
    showSuccess(`${taskIds.length} tasks updated to ${status}!`);
}

// Bulk delete
function bulkDelete() {
    const checkedBoxes = document.querySelectorAll('.task-checkbox:checked');
    const taskIds = Array.from(checkedBoxes).map(cb => cb.value);
    
    if (taskIds.length === 0) return;
    
    // Show confirmation modal
    const taskTitles = taskIds.map(id => {
        const task = tasks.find(t => t.id === id);
        return task ? task.title : 'Unknown';
    }).join(', ');
    
    document.getElementById('deleteTaskName').textContent = `${taskIds.length} tasks: ${taskTitles}`;
    document.getElementById('deleteTaskModal').dataset.taskId = 'bulk';
    document.getElementById('deleteTaskModal').dataset.bulkIds = taskIds.join(',');
    
    new bootstrap.Modal(document.getElementById('deleteTaskModal')).show();
}

// Utility functions
function showSuccess(message) {
    if (window.toast) {
        window.toast.success(message);
    } else {
        console.log('Success:', message);
    }
}

function showError(message) {
    if (window.toast) {
        window.toast.error(message);
    } else {
        console.log('Error:', message);
    }
}

// Setup task checkbox change listeners (delegated)
document.addEventListener('change', function(e) {
    if (e.target.classList.contains('task-checkbox')) {
        updateBulkActions();
    }
});

// Initialize project context on page load
document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const projectId = urlParams.get('id');
    
    if (projectId) {
        // Show back button and project context
        document.getElementById('back-button-container').style.display = 'block';
        
        // Update context text
        // Project loaded from API
        const project = projects.find(p => p.id === projectId);
        const contextElement = document.getElementById('task-context');
        if (contextElement && project) {
            contextElement.textContent = `Project: ${project.name}`;
        }
        
        console.log('📋 Tasks page loaded for project:', project ? project.name : projectId);
    } else {
        console.log('📋 Tasks page loaded (organization level)');
    }
});
</script>