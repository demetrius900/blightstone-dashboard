<%- contentFor('html_attribute') %>

<%- contentFor('extra_css') %>

<%- contentFor('body_attribute') %>

<%- contentFor('content') %>

<!-- Start container fuild -->
<div class="container-fluid">

    <div class="py-3 d-flex align-items-sm-center flex-sm-row flex-column">
        <div class="flex-grow-1">
            <h4 class="fs-18 fw-semibold m-0">Team Management</h4>
        </div>
        <div class="text-end">
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTeamMemberModal">
                <i class="mdi mdi-plus me-2"></i>Add Team Member
            </button>
        </div>
    </div>



    <!-- Start Team Members List -->
    <div class="row">
        <div class="col-md-12">
            <div class="card overflow-hidden">
                <div class="card-header">
                    <div class="d-flex align-items-center">
                        <h5 class="card-title mb-0">Team Members</h5>
                    </div>
                </div>

                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>Member</th>
                                    <th>Role</th>
                                    <th>Email</th>
                                    <th>Projects</th>
                                    <th>Tasks</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="team-members-table">
                                <!-- Team members will be loaded from API -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Team Members List -->

</div>
<!-- container-fluid -->

<!-- Add Team Member Modal -->
<div class="modal fade" id="addTeamMemberModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Team Member</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addTeamMemberForm">
                    <div class="mb-3">
                        <label for="teamMemberName" class="form-label">Full Name *</label>
                        <input type="text" class="form-control" id="teamMemberName" name="name" placeholder="Enter full name" required>
                    </div>
                    <div class="mb-3">
                        <label for="teamMemberEmail" class="form-label">Email *</label>
                        <input type="email" class="form-control" id="teamMemberEmail" name="email" placeholder="Enter email address" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Role</label>
                        <select class="form-select" id="teamMemberRole" name="role">
                            <option value="">Select role</option>
                            <option value="CEO/Founder">CEO/Founder</option>
                            <option value="Operations Manager">Operations Manager</option>
                            <option value="Media Buyer">Media Buyer</option>
                            <option value="Store Manager">Store Manager</option>
                            <option value="Product Research">Product Research</option>
                            <option value="Creative Designer">Creative Designer</option>
                            <option value="Video Editor">Video Editor</option>
                            <option value="Customer Service">Customer Service</option>
                            <option value="Supply Chain Manager">Supply Chain Manager</option>
                            <option value="Data Analyst">Data Analyst</option>
                            <option value="Social Media Manager">Social Media Manager</option>
                            <option value="Content Creator">Content Creator</option>
                            <option value="Virtual Assistant">Virtual Assistant</option>
                            <option value="Developer">Developer</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Avatar</label>
                        <input type="file" class="form-control" accept="image/*">
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="submit" class="btn btn-primary" form="addTeamMemberForm">
                    <span id="addMemberBtnText">Send Invite & Add Member</span>
                    <span id="addMemberSpinner" class="spinner-border spinner-border-sm d-none ms-2" role="status"></span>
                </button>
            </div>
        </div>
    </div>
</div>

<%- contentFor('extra_javascript') %>

<script>
// Team Management System
let teamMembers = [];

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    console.log('ðŸ‘¥ Team Management loaded');
    loadTeamMembers();
    setupEventListeners();
});

// Setup event listeners
function setupEventListeners() {
    // Add team member form
    const form = document.getElementById('addTeamMemberForm');
    if (form) {
        form.addEventListener('submit', handleAddTeamMember);
    }
}

// Load team members from API
async function loadTeamMembers() {
    try {
        const response = await fetch('/api/users');
        if (response.ok) {
            teamMembers = await response.json();
            updateTeamStats();
            console.log('âœ… Team members loaded:', teamMembers.length);
        } else {
            console.error('Failed to load team members');
            showError('Failed to load team members');
        }
    } catch (error) {
        console.error('Error loading team members:', error);
        showError('Failed to load team members');
    }
}

// Handle add team member
async function handleAddTeamMember(e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const memberData = Object.fromEntries(formData.entries());
    
    if (!memberData.name || !memberData.email || !memberData.role) {
        showError('Please fill in all required fields');
        return;
    }
    
    try {
        showLoading('addMember');
        
        // Simulate API call - will implement real Supabase integration
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // For now, add to local array
        const newMember = {
            id: Date.now().toString(),
            ...memberData,
            status: 'Pending Invite',
            avatar_url: '/images/users/user.jpg',
            created_at: new Date().toISOString().split('T')[0]
        };
        
        teamMembers.unshift(newMember);
        updateTeamStats();
        
        // Close modal and reset form
        const modal = bootstrap.Modal.getInstance(document.getElementById('addTeamMemberModal'));
        modal.hide();
        e.target.reset();
        
        showSuccess(`Invitation sent to ${memberData.email}! They will receive an email to join Blightstone.`);
        
    } catch (error) {
        console.error('Error adding team member:', error);
        showError('Failed to send invitation');
    } finally {
        hideLoading('addMember');
    }
}

// Update team statistics
function updateTeamStats() {
    // Update total team members count
    const totalElement = document.querySelector('.total-employees');
    if (totalElement) {
        totalElement.textContent = teamMembers.length;
    }
    
    // Update active members count
    const activeMembers = teamMembers.filter(m => m.status === 'Active').length;
    const activeElement = document.querySelector('.active-employees');
    if (activeElement) {
        activeElement.textContent = activeMembers;
    }
    
    // Update pending invites count
    const pendingMembers = teamMembers.filter(m => m.status === 'Pending Invite').length;
    const pendingElement = document.querySelector('.pending-invites');
    if (pendingElement) {
        pendingElement.textContent = pendingMembers;
    }
}

// Utility functions
function showLoading(action) {
    const button = document.getElementById(`${action}BtnText`);
    const spinner = document.getElementById(`${action}Spinner`);
    
    if (button) button.textContent = 'Sending invite...';
    if (spinner) spinner.classList.remove('d-none');
}

function hideLoading(action) {
    const button = document.getElementById(`${action}BtnText`);
    const spinner = document.getElementById(`${action}Spinner`);
    
    if (button) {
        switch(action) {
            case 'addMember': button.textContent = 'Send Invite & Add Member'; break;
        }
    }
    if (spinner) spinner.classList.add('d-none');
}

function showSuccess(message) {
    const toast = document.createElement('div');
    toast.className = 'toast-notification bg-success text-white p-3 rounded position-fixed';
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999;';
    toast.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="mdi mdi-check-circle me-2"></i>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 5000);
}

function showError(message) {
    const toast = document.createElement('div');
    toast.className = 'toast-notification bg-danger text-white p-3 rounded position-fixed';
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999;';
    toast.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="mdi mdi-alert-circle me-2"></i>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(toast);
    setTimeout(() => toast.remove(), 4000);
}

// Team member action functions
async function editTeamMember(email) {
    try {
        const response = await fetch(`/api/users/${email}`);
        if (response.ok) {
            const user = await response.json();
            
            // Fill the add member form with existing data for editing
            document.getElementById('memberName').value = user.name || '';
            document.getElementById('memberEmail').value = user.email || '';
            document.getElementById('memberRole').value = user.role || '';
            
            // Change modal title and button text
            document.querySelector('#addTeamMemberModal .modal-title').textContent = 'Edit Team Member';
            document.getElementById('addMemberBtnText').textContent = 'Update Member';
            
            // Store editing state
            document.getElementById('addTeamMemberForm').dataset.editing = email;
            
            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('addTeamMemberModal'));
            modal.show();
        } else {
            showError('Team member not found');
        }
    } catch (error) {
        console.error('Error fetching user:', error);
        showError('Failed to load team member data');
    }
}

async function viewTeamMember(email) {
    try {
        const response = await fetch(`/api/users/${email}`);
        if (response.ok) {
            const user = await response.json();
            alert(`Team Member Profile:\n\nName: ${user.name || 'N/A'}\nEmail: ${user.email}\nRole: ${user.role || 'N/A'}\nStatus: ${user.status || 'Active'}`);
        } else {
            showError('Team member not found');
        }
    } catch (error) {
        console.error('Error fetching user:', error);
        showError('Failed to load team member data');
    }
}

async function removeTeamMember(email) {
    if (confirm(`Are you sure you want to remove this team member?\n\nEmail: ${email}\n\nThis action cannot be undone.`)) {
        try {
            const response = await fetch(`/api/users/${email}`, {
                method: 'DELETE'
            });
            
            if (response.ok) {
                showSuccess('Team member removed successfully');
                loadTeamMembers(); // Reload the table
            } else {
                showError('Failed to remove team member');
            }
        } catch (error) {
            console.error('Error removing user:', error);
            showError('Failed to remove team member');
        }
    }
}
</script>