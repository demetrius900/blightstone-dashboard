<%- contentFor('html_attribute') %>

<%- contentFor('extra_css') %>

<%- contentFor('body_attribute') %>

<%- contentFor('content') %>

<!-- Page Content -->
<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="page-title-box">
                <div class="page-title-right">
                    <ol class="breadcrumb m-0">
                        <li class="breadcrumb-item"><a href="/">Dashboard</a></li>
                        <li class="breadcrumb-item active">Documents</li>
                    </ol>
                </div>
                <h4 class="page-title">
                    <div class="d-flex align-items-center">
                        <div id="back-button-container" style="display: none;">
                            <a href="javascript:history.back()" class="btn btn-outline-secondary me-3">
                                <i class="mdi mdi-arrow-left"></i> Back
                            </a>
                        </div>
                        <div>
                            üìÅ <span id="document-title">Marketing Documents</span>
                            <span class="badge bg-primary ms-2" id="storageUsed">Loading...</span>
                        </div>
                    </div>
                </h4>
            </div>
        </div>
    </div>

    <!-- Actions Bar -->
    <div class="row mb-3">
        <div class="col-lg-8">
            <div class="d-flex gap-2">
                <button class="btn btn-primary" onclick="showUploadModal()">
                    <i class="mdi mdi-cloud-upload me-2"></i>Upload Files
                </button>
                <button class="btn btn-outline-primary" onclick="showCreateFolderModal()">
                    <i class="mdi mdi-folder-plus me-2"></i>New Folder
                </button>
                <div class="dropdown">
                    <button class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                        <i class="mdi mdi-view-grid me-2"></i>View
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="setView('grid')">
                            <i class="mdi mdi-view-grid me-2"></i>Grid View
                        </a></li>
                        <li><a class="dropdown-item" href="#" onclick="setView('list')">
                            <i class="mdi mdi-view-list me-2"></i>List View
                        </a></li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-lg-4">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search files..." id="searchInput">
                <button class="btn btn-outline-secondary" onclick="searchFiles()">
                    <i class="mdi mdi-magnify"></i>
                </button>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex gap-2 flex-wrap">
                <select class="form-select" style="width: auto;" id="projectFilter">
                    <option value="">All Projects</option>
                    <!-- Will be populated by JavaScript -->
                </select>
                <select class="form-select" style="width: auto;" id="folderFilter">
                    <option value="">All Folders</option>
                    <!-- Will be populated by JavaScript -->
                </select>
                <select class="form-select" style="width: auto;" id="typeFilter">
                    <option value="">All Types</option>
                    <option value="image">Images</option>
                    <option value="video">Videos</option>
                    <option value="document">Documents</option>
                    <option value="other">Other</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Navigation Breadcrumb -->
    <div class="row mb-3">
        <div class="col-12">
            <nav aria-label="folder-navigation">
                <ol class="breadcrumb bg-light p-2 rounded" id="folderBreadcrumb">
                    <li class="breadcrumb-item">
                        <a href="#" onclick="navigateToFolder(null)">
                            <i class="mdi mdi-home me-1"></i>Root
                        </a>
                    </li>
                </ol>
            </nav>
        </div>
    </div>

    <!-- File Grid/List -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body p-0">
                    <!-- Drop Zone -->
                    <div class="drop-zone d-none" id="dropZone">
                        <div class="drop-zone-content">
                            <i class="mdi mdi-cloud-upload display-4 text-primary"></i>
                            <h5>Drop files here to upload</h5>
                            <p class="text-muted">or click to browse</p>
                        </div>
                    </div>

                    <!-- Files Container -->
                    <div id="filesContainer" class="p-3">
                        <!-- Grid View -->
                        <div id="gridView" class="row">
                            <!-- Files will be loaded here -->
                        </div>

                        <!-- List View -->
                        <div id="listView" class="d-none">
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead class="table-light">
                                        <tr>
                                            <th width="5%">
                                                <input type="checkbox" class="form-check-input" id="selectAll">
                                            </th>
                                            <th width="40%">Name</th>
                                            <th width="15%">Type</th>
                                            <th width="10%">Size</th>
                                            <th width="15%">Modified</th>
                                            <th width="15%">Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody id="listViewTable">
                                        <!-- Files will be loaded here -->
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Empty State -->
                        <div id="emptyState" class="text-center py-5 d-none">
                            <i class="mdi mdi-folder-open-outline display-4 text-muted"></i>
                            <h5 class="text-muted mt-3">No files found</h5>
                            <p class="text-muted">Upload some files to get started</p>
                            <button class="btn btn-primary" onclick="showUploadModal()">
                                <i class="mdi mdi-cloud-upload me-2"></i>Upload Files
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Upload Modal -->
<div class="modal fade" id="uploadModal" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Upload Files</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="uploadForm" enctype="multipart/form-data">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Select Folder</label>
                            <select class="form-select" id="uploadFolder">
                                <option value="">Root Directory</option>
                                <!-- Will be populated by JavaScript -->
                            </select>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label class="form-label">Project (Optional)</label>
                            <select class="form-select" id="uploadProject">
                                <option value="">No Project</option>
                                <!-- Will be populated by JavaScript -->
                            </select>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Choose Files</label>
                        <input type="file" class="form-control" id="fileInput" multiple accept="image/*,video/*,.pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx">
                        <div class="form-text">Supported: Images, Videos, Documents. Max 50MB per file.</div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Description (Optional)</label>
                        <textarea class="form-control" id="uploadDescription" rows="2" placeholder="Describe these files..."></textarea>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Tags (Optional)</label>
                        <input type="text" class="form-control" id="uploadTags" placeholder="marketing, campaign, social-media">
                        <div class="form-text">Separate tags with commas</div>
                    </div>

                    <!-- Upload Progress -->
                    <div id="uploadProgress" class="d-none">
                        <div class="mb-2">
                            <div class="d-flex justify-content-between">
                                <span>Uploading...</span>
                                <span id="progressText">0%</span>
                            </div>
                            <div class="progress">
                                <div class="progress-bar" role="progressbar" id="progressBar" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="uploadFiles()">
                    <i class="mdi mdi-cloud-upload me-2"></i>Upload
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Create Folder Modal -->
<div class="modal fade" id="createFolderModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create New Folder</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="createFolderForm">
                    <div class="mb-3">
                        <label class="form-label">Folder Name *</label>
                        <input type="text" class="form-control" id="folderName" placeholder="e.g., Q1 Campaign Assets" required>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Parent Folder</label>
                        <select class="form-select" id="parentFolder">
                            <option value="">Root Directory</option>
                            <!-- Will be populated by JavaScript -->
                        </select>
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Project (Optional)</label>
                        <select class="form-select" id="folderProject">
                            <option value="">No Project</option>
                            <!-- Will be populated by JavaScript -->
                        </select>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="createFolder()">
                    <i class="mdi mdi-folder-plus me-2"></i>Create
                </button>
            </div>
        </div>
    </div>
</div>

<!-- File Preview Modal -->
<div class="modal fade" id="previewModal" tabindex="-1">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="previewTitle">File Preview</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body text-center">
                <div id="previewContent">
                    <!-- Preview content will be loaded here -->
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="downloadBtn">
                    <i class="mdi mdi-download me-2"></i>Download
                </button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<style>
.drop-zone {
    border: 2px dashed #007bff;
    border-radius: 10px;
    text-align: center;
    padding: 40px;
    margin: 20px;
    background: rgba(0, 123, 255, 0.05);
    cursor: pointer;
    transition: all 0.3s ease;
}

.drop-zone:hover,
.drop-zone.dragover {
    border-color: #0056b3;
    background: rgba(0, 123, 255, 0.1);
}

.file-card {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    cursor: pointer;
}

.file-card:hover {
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0,0,0,0.1);
}

.file-icon {
    font-size: 3rem;
    color: #6c757d;
}

.file-icon.image { color: #198754; }
.file-icon.video { color: #dc3545; }
.file-icon.document { color: #0d6efd; }

.folder-icon {
    font-size: 3rem;
    color: #ffc107;
}

.file-thumbnail {
    width: 100%;
    height: 120px;
    object-fit: cover;
    border-radius: 8px;
}

.selected {
    border: 2px solid #007bff !important;
    background: rgba(0, 123, 255, 0.1) !important;
}
</style>

<script>
// Global state
let currentFolder = null;
let currentView = 'grid';
let selectedFiles = new Set();
let documents = [];
let folders = [];
let projects = [];

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    loadInitialData();
    setupEventListeners();
    setupDragAndDrop();
});

async function loadInitialData() {
    try {
        await Promise.all([
            loadFolders(),
            loadProjects(),
            loadDocuments()
        ]);
        populateDropdowns();
    } catch (error) {
        console.error('Error loading data:', error);
        showError('Failed to load data');
    }
}

async function loadFolders() {
    try {
        const response = await fetch('/api/folders', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        folders = await response.json();
    } catch (error) {
        console.error('Error loading folders:', error);
    }
}

async function loadProjects() {
    try {
        const response = await fetch('/api/projects', {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        projects = await response.json();
    } catch (error) {
        console.error('Error loading projects:', error);
    }
}

async function loadDocuments(folderId = null, projectId = null) {
    try {
        let url = '/api/documents';
        const params = new URLSearchParams();
        if (folderId) params.append('folder_id', folderId);
        if (projectId) params.append('project_id', projectId);
        if (params.toString()) url += '?' + params.toString();

        const response = await fetch(url, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            }
        });
        documents = await response.json();
        renderDocuments();
        updateStorageInfo();
    } catch (error) {
        console.error('Error loading documents:', error);
        showError('Failed to load documents');
    }
}

function renderDocuments() {
    const gridView = document.getElementById('gridView');
    const listViewTable = document.getElementById('listViewTable');
    const emptyState = document.getElementById('emptyState');

    // Clear existing content
    gridView.innerHTML = '';
    listViewTable.innerHTML = '';

    // Show folders first
    const currentFolders = folders.filter(folder => 
        (currentFolder ? folder.parent_id === currentFolder : !folder.parent_id)
    );

    if (documents.length === 0 && currentFolders.length === 0) {
        emptyState.classList.remove('d-none');
        return;
    } else {
        emptyState.classList.add('d-none');
    }

    // Render folders
    currentFolders.forEach(folder => {
        if (currentView === 'grid') {
            gridView.innerHTML += createFolderGridItem(folder);
        } else {
            listViewTable.innerHTML += createFolderListItem(folder);
        }
    });

    // Render documents
    documents.forEach(doc => {
        if (currentView === 'grid') {
            gridView.innerHTML += createDocumentGridItem(doc);
        } else {
            listViewTable.innerHTML += createDocumentListItem(doc);
        }
    });
}

function createFolderGridItem(folder) {
    return `
        <div class="col-lg-2 col-md-3 col-sm-4 col-6 mb-3">
            <div class="card file-card h-100" onclick="openFolder('${folder.id}')">
                <div class="card-body text-center p-3">
                    <i class="mdi mdi-folder folder-icon"></i>
                    <h6 class="mt-2 mb-1 text-truncate" title="${folder.name}">${folder.name}</h6>
                    <small class="text-muted">Folder</small>
                </div>
            </div>
        </div>
    `;
}

function createDocumentGridItem(doc) {
    const fileType = getFileType(doc.file_type);
    const icon = getFileIcon(fileType);
    const isImage = fileType === 'image';
    
    return `
        <div class="col-lg-2 col-md-3 col-sm-4 col-6 mb-3">
            <div class="card file-card h-100" onclick="previewFile('${doc.id}')">
                <div class="card-body text-center p-3">
                    ${isImage ? 
                        `<img src="${doc.file_url}" class="file-thumbnail" alt="${doc.original_name}">` :
                        `<i class="mdi ${icon} file-icon ${fileType}"></i>`
                    }
                    <h6 class="mt-2 mb-1 text-truncate" title="${doc.original_name}">${doc.original_name}</h6>
                    <small class="text-muted">${formatFileSize(doc.file_size)}</small>
                </div>
                <div class="card-footer p-2">
                    <div class="d-flex justify-content-between">
                        <button class="btn btn-sm btn-outline-primary" onclick="event.stopPropagation(); downloadFile('${doc.id}')">
                            <i class="mdi mdi-download"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" onclick="event.stopPropagation(); shareFile('${doc.id}')">
                            <i class="mdi mdi-share"></i>
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="event.stopPropagation(); deleteFile('${doc.id}')">
                            <i class="mdi mdi-delete"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

function getFileType(mimeType) {
    if (mimeType.startsWith('image/')) return 'image';
    if (mimeType.startsWith('video/')) return 'video';
    if (mimeType.includes('pdf') || mimeType.includes('document') || 
        mimeType.includes('text') || mimeType.includes('sheet') || 
        mimeType.includes('presentation')) return 'document';
    return 'other';
}

function getFileIcon(fileType) {
    switch (fileType) {
        case 'image': return 'mdi-file-image';
        case 'video': return 'mdi-file-video';
        case 'document': return 'mdi-file-document';
        default: return 'mdi-file';
    }
}

function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

function showUploadModal() {
    new bootstrap.Modal(document.getElementById('uploadModal')).show();
}

function showCreateFolderModal() {
    new bootstrap.Modal(document.getElementById('createFolderModal')).show();
}

async function uploadFiles() {
    const fileInput = document.getElementById('fileInput');
    const files = fileInput.files;
    
    if (files.length === 0) {
        showError('Please select files to upload');
        return;
    }

    const formData = new FormData();
    for (let file of files) {
        formData.append('file', file);
    }
    
    formData.append('folder_id', document.getElementById('uploadFolder').value);
    formData.append('project_id', document.getElementById('uploadProject').value);
    formData.append('description', document.getElementById('uploadDescription').value);
    formData.append('tags', document.getElementById('uploadTags').value);

    // Show progress
    document.getElementById('uploadProgress').classList.remove('d-none');
    
    try {
        const response = await fetch('/api/documents/upload', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
            body: formData
        });

        if (response.ok) {
            showSuccess('Files uploaded successfully!');
            bootstrap.Modal.getInstance(document.getElementById('uploadModal')).hide();
            loadDocuments(currentFolder);
        } else {
            throw new Error('Upload failed');
        }
    } catch (error) {
        showError('Upload failed: ' + error.message);
    } finally {
        document.getElementById('uploadProgress').classList.add('d-none');
    }
}

function showSuccess(message) {
    // Implement toast notification
    console.log('Success:', message);
}

function showError(message) {
    // Implement toast notification
    console.log('Error:', message);
}

// Initialize project context on page load
document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const projectId = urlParams.get('id');
    
    if (projectId) {
        // Show back button and update context
        document.getElementById('back-button-container').style.display = 'block';
        
        // Update title for project context
        const projects = JSON.parse(localStorage.getItem('projects') || '[]');
        const project = projects.find(p => p.id === projectId);
        const titleElement = document.getElementById('document-title');
        if (titleElement && project) {
            titleElement.textContent = `${project.name} Documents`;
        }
        
        console.log('üìÅ Documents page loaded for project:', project ? project.name : projectId);
    } else {
        console.log('üìÅ Documents page loaded (organization level)');
    }
});

// More functions will continue...
console.log('üìÅ Documents page loaded!');
</script>

<%- contentFor('extra_javascript') %>