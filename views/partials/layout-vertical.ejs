<!DOCTYPE html>
<html lang="en" <%- html_attribute %>>

<head>
    <%- include('./title-meta') %>
    <%- extra_css %>
    <%- include ('./head-css') %>
    <!-- Sonner Toast -->
    <link href="https://cdn.jsdelivr.net/npm/sonner@1.0.0/dist/sonner.css" rel="stylesheet">
</head>

<body data-menu-color="light" data-sidebar="default" <%- body_attribute %>>
    <!-- Sonner Toast Container -->
    <div id="sonner"></div>
    
    <!-- Begin page -->
    <div id="layout-wrapper">

    <%- include ('./topbar') %>
    <%- include ('./sidebar') %>

    <div class="content-page">

        <div class="content">
            <%- content %>
        </div>

        <%- include ('./footer') %>

    </div>

</div>

<%- include ('./vendor') %>
    <!-- Sonner Toast -->
    <script src="https://cdn.jsdelivr.net/npm/sonner@1.0.0/dist/sonner.js"></script>
    <!-- Initialize Sonner -->
    <script>
        // Initialize Sonner toast
        window.toast = window.sonner.toast;
        window.toast.success = (message) => window.sonner.toast.success(message);
        window.toast.error = (message) => window.sonner.toast.error(message);
        window.toast.info = (message) => window.sonner.toast.info(message);
        window.toast.warning = (message) => window.sonner.toast.warning(message);
    </script>
    <%- extra_javascript %>

<script>
// Authentication and user management
document.addEventListener('DOMContentLoaded', function() {
    // Light mode setup
            // console.log('‚úÖ Loading dashboard in light mode...');
    
    // Add a longer delay to ensure localStorage is properly set after login
    setTimeout(() => {
        // Check if we just logged in (skip auth check briefly after login)
        const justLoggedIn = sessionStorage.getItem('just_logged_in');
        if (justLoggedIn) {
            console.log('üîÑ Just logged in, skipping auth check briefly');
            sessionStorage.removeItem('just_logged_in');
            return;
        }
        
        // Check if we're on a public page (auth pages)
        const publicPages = ['/auth-login', '/auth-register', '/auth-recoverpw', '/auth-forgot-password', '/auth-lock-screen'];
        const currentPath = window.location.pathname;
        const isPublicPage = publicPages.includes(currentPath);
        
        // Check Supabase session from localStorage (client-side auth)
        const supabaseSession = localStorage.getItem('supabase_session');
        const supabaseUser = localStorage.getItem('supabase_user');
        
        let isAuthenticated = false;
        if (supabaseSession && supabaseUser) {
            try {
                const session = JSON.parse(supabaseSession);
                const user = JSON.parse(supabaseUser);
                
                console.log('üîç Session data:', { 
                    hasSession: !!session, 
                    hasUser: !!user, 
                    expiresAt: session?.expires_at,
                    currentTime: new Date().getTime() / 1000 
                });
                
                // For now, just check if we have session and user data
                // Skip expiration check to debug the issue
                if (session && user) {
                    isAuthenticated = true;
                    console.log('‚úÖ User authenticated via localStorage:', user.email);
                } else {
                    console.log('üîç Invalid session data');
                }
            } catch (e) {
                console.error('Error parsing session data:', e);
                localStorage.removeItem('supabase_session');
                localStorage.removeItem('supabase_user');
            }
        } else {
            console.log('üîç No session data in localStorage');
        }
        
        console.log('üîç Client-side auth check:', { isAuthenticated, currentPath, isPublicPage });
        
        if (!isAuthenticated) {
            // User not logged in
            if (!isPublicPage) {
                console.log('‚ö†Ô∏è No valid session found, but allowing access for debugging');
                // Temporarily disabled: window.location.href = '/auth-login';
                // return;
            }
        } else {
            // User is logged in
            if (isPublicPage) {
                console.log('User logged in, redirecting to dashboard...');
                // Prevent redirect loops by checking if we're already redirecting
                if (!window.location.href.includes('redirecting')) {
                    window.location.href = '/?redirecting=true';
                }
                return;
            }
            
            // Update UI with user info
            try {
                updateUserInterface(user);
            } catch (error) {
                console.error('Error updating user interface:', error);
                window.location.href = '/auth-login';
            }
        }
        
        // Logout functionality
        const logoutBtn = document.getElementById('logoutBtn');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', function(e) {
                e.preventDefault();
                logout();
            });
        }
    }, 100);
});

function updateUserInterface(user) {
    // Update greeting with current time
    const greeting = document.getElementById('greeting');
    if (greeting) {
        const hour = new Date().getHours();
        let timeGreeting = 'Good Evening';
        if (hour < 12) timeGreeting = 'Good Morning';
        else if (hour < 18) timeGreeting = 'Good Afternoon';
        
        const name = user.name || user.email?.split('@')[0] || 'Team Member';
        greeting.textContent = `${timeGreeting}, ${name}!`;
        
        // Fade in the greeting after updating
        greeting.style.opacity = '1';
    }
    
    // Update user name in dropdown
    const userName = document.getElementById('userName');
    if (userName) {
        const name = user.name || user.email?.split('@')[0] || 'Team Member';
        userName.innerHTML = `${name} <i class="mdi mdi-chevron-down"></i>`;
        // Fade in the username after updating
        userName.style.opacity = '1';
    }
    
    // Update user avatar
    const userAvatar = document.getElementById('userAvatar');
    if (userAvatar) {
        const name = user.name || user.email?.split('@')[0] || 'Team Member';
        const avatarUrl = user.avatar_url || 
                         `https://ui-avatars.com/api/?name=${encodeURIComponent(name)}&background=6c5ce7&color=fff&size=128`;
        userAvatar.src = avatarUrl;
        // Fade in the avatar after updating
        userAvatar.style.opacity = '1';
    }
}

async function logout() {
    try {
        // Call logout API (optional - mainly for server-side cleanup)
        await fetch('/api/auth/logout', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
    } catch (error) {
        console.error('Logout error:', error);
    } finally {
        // Clear Supabase session data from localStorage
        localStorage.removeItem('supabase_session');
        localStorage.removeItem('supabase_user');
        
        // Also clear any legacy session data
        localStorage.removeItem('blightstone_user');
        localStorage.removeItem('blightstone_session');
        
        console.log('‚úÖ Logged out, session data cleared');
        
        // Redirect to login
        window.location.href = '/auth-login';
    }
}

function enableDarkMode() {
    // Set dark mode theme
    document.documentElement.setAttribute('data-bs-theme', 'dark');
    
    // Update the theme toggle button if it exists
    const themeToggle = document.getElementById('light-dark-mode');
    if (themeToggle) {
        const darkIcon = themeToggle.querySelector('.dark-mode');
        const lightIcon = themeToggle.querySelector('.light-mode');
        if (darkIcon) darkIcon.style.display = 'none';
        if (lightIcon) lightIcon.style.display = 'block';
    }
}

// Make user info globally available
window.getUserInfo = function() {
            // User session loaded from server
    return user ? JSON.parse(user) : null;
};
</script>

</body>

</html>